{"name": "test_del_package", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: no such alert\n  (Session info: chrome=116.0.5845.97)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6BA0252A2+57122]\n\t(No symbol) [0x00007FF6B9F9EA92]\n\t(No symbol) [0x00007FF6B9E6E25D]\n\t(No symbol) [0x00007FF6B9E64169]\n\t(No symbol) [0x00007FF6B9E86BFF]\n\t(No symbol) [0x00007FF6B9EC705D]\n\t(No symbol) [0x00007FF6B9E86AB8]\n\t(No symbol) [0x00007FF6B9EC6DB3]\n\t(No symbol) [0x00007FF6B9E9D2B1]\n\t(No symbol) [0x00007FF6B9E9E494]\n\tGetHandleVerifier [0x00007FF6BA2CEF82+2849794]\n\tGetHandleVerifier [0x00007FF6BA321D24+3189156]\n\tGetHandleVerifier [0x00007FF6BA31ACAF+3160367]\n\tGetHandleVerifier [0x00007FF6BA0B6D06+653702]\n\t(No symbol) [0x00007FF6B9FAA208]\n\t(No symbol) [0x00007FF6B9FA62C4]\n\t(No symbol) [0x00007FF6B9FA63F6]\n\t(No symbol) [0x00007FF6B9F967A3]\n\tBaseThreadInitThunk [0x00007FF98D027614+20]\n\tRtlUserThreadStart [0x00007FF98E0C26A1+33]", "trace": "self = <TestCase.test_table.Testtable object at 0x0000017DABD05ED0>\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"7cea3c85506e8572a33246e1e5d4003c\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    def test_del_package(self, beginandend):\n    \n        self.driver, self.logger =beginandend\n        dp = packagePage(self.driver)\n>       dp.delete_package()\n\nTestCase\\test_table.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\table_commit.py:163: in delete_package\n    self.alertAccept()\nbase\\base_page.py:102: in alertAccept\n    self.driver.switch_to.alert.accept()\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:58: in alert\n    _ = alert.text\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\common\\alert.py:59: in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017DABD042B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such alert\",\"message\":\"no such alert\\\\n  (Session info: chrome=116.0.5...07FF6B9F967A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98D027614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF98E0C26A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoAlertPresentException: Message: no such alert\nE         (Session info: chrome=116.0.5845.97)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6BA0252A2+57122]\nE       \t(No symbol) [0x00007FF6B9F9EA92]\nE       \t(No symbol) [0x00007FF6B9E6E25D]\nE       \t(No symbol) [0x00007FF6B9E64169]\nE       \t(No symbol) [0x00007FF6B9E86BFF]\nE       \t(No symbol) [0x00007FF6B9EC705D]\nE       \t(No symbol) [0x00007FF6B9E86AB8]\nE       \t(No symbol) [0x00007FF6B9EC6DB3]\nE       \t(No symbol) [0x00007FF6B9E9D2B1]\nE       \t(No symbol) [0x00007FF6B9E9E494]\nE       \tGetHandleVerifier [0x00007FF6BA2CEF82+2849794]\nE       \tGetHandleVerifier [0x00007FF6BA321D24+3189156]\nE       \tGetHandleVerifier [0x00007FF6BA31ACAF+3160367]\nE       \tGetHandleVerifier [0x00007FF6BA0B6D06+653702]\nE       \t(No symbol) [0x00007FF6B9FAA208]\nE       \t(No symbol) [0x00007FF6B9FA62C4]\nE       \t(No symbol) [0x00007FF6B9FA63F6]\nE       \t(No symbol) [0x00007FF6B9F967A3]\nE       \tBaseThreadInitThunk [0x00007FF98D027614+20]\nE       \tRtlUserThreadStart [0x00007FF98E0C26A1+33]\n\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoAlertPresentException"}, "attachments": [{"name": "log", "source": "bd25ce6f-4fd5-475c-9137-0f83b7526e8a-attachment.txt", "type": "text/plain"}], "start": 1692775963597, "stop": 1692775971309, "uuid": "94b64d5b-8ee5-4a67-aae6-82d868330a6e", "historyId": "a224edfc98c8c69879e3da2fff7f9f21", "testCaseId": "a224edfc98c8c69879e3da2fff7f9f21", "fullName": "TestCase.test_table.Testtable#test_del_package", "labels": [{"name": "feature", "value": "测试360搜索"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beginandend')"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_table"}, {"name": "subSuite", "value": "Testtable"}, {"name": "host", "value": "DESKTOP-14KMC4A"}, {"name": "thread", "value": "29520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_table"}]}