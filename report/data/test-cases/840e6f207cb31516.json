{"uid":"840e6f207cb31516","name":"test_promotions[data0]","fullName":"TestCase.test_platforms.Testplatforms#test_promotions","historyId":"09a6feb9c065d91b3c18563db0474ebc","time":{"start":1692871898848,"stop":1692871907811,"duration":8963},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=116.0.5845.97)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6862252A2+57122]\n\t(No symbol) [0x00007FF68619EA92]\n\t(No symbol) [0x00007FF68606E25D]\n\t(No symbol) [0x00007FF6860A32B7]\n\t(No symbol) [0x00007FF6860A263B]\n\t(No symbol) [0x00007FF6860C6FDA]\n\t(No symbol) [0x00007FF68609EB76]\n\t(No symbol) [0x00007FF6860C71F0]\n\t(No symbol) [0x00007FF6860DEB82]\n\t(No symbol) [0x00007FF6860C6DB3]\n\t(No symbol) [0x00007FF68609D2B1]\n\t(No symbol) [0x00007FF68609E494]\n\tGetHandleVerifier [0x00007FF6864CEF82+2849794]\n\tGetHandleVerifier [0x00007FF686521D24+3189156]\n\tGetHandleVerifier [0x00007FF68651ACAF+3160367]\n\tGetHandleVerifier [0x00007FF6862B6D06+653702]\n\t(No symbol) [0x00007FF6861AA208]\n\t(No symbol) [0x00007FF6861A62C4]\n\t(No symbol) [0x00007FF6861A63F6]\n\t(No symbol) [0x00007FF6861967A3]\n\tBaseThreadInitThunk [0x00007FF98D027614+20]\n\tRtlUserThreadStart [0x00007FF98E0C26A1+33]","statusTrace":"self = <TestCase.test_platforms.Testplatforms object at 0x00000239EBD30B50>\ndata = ['test01', 1, 1, 1, 2, 1, ...]\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"243f84aa10e82f99d172b17fe4377220\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    @pytest.mark.parametrize('data',excle_read('./data/ele.xlsx', '推广链接查询用例'))\n    def test_promotions(self, data, beginandend):\n        for i in range(len(data)):\n            if data[i] is None:\n                data[i] = 'null'\n                print(data[i])\n        test_num, ID, vedio_id, episodes_id, user_id, set_id, pay_id, result = data\n        self.driver, self.logger = beginandend\n        p = PlatformPage(self.driver)\n>       p.query_promotions(ID, vedio_id, episodes_id, user_id, set_id, pay_id)\n\nTestCase\\test_platforms.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\platforms_page.py:31: in query_promotions\n    ???\nbase\\base_page.py:35: in send_keys\n    self.locate_element(args).send_keys(value)\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000239EBDDEB60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6861967A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98D027614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF98E0C26A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=116.0.5845.97)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6862252A2+57122]\nE       \t(No symbol) [0x00007FF68619EA92]\nE       \t(No symbol) [0x00007FF68606E25D]\nE       \t(No symbol) [0x00007FF6860A32B7]\nE       \t(No symbol) [0x00007FF6860A263B]\nE       \t(No symbol) [0x00007FF6860C6FDA]\nE       \t(No symbol) [0x00007FF68609EB76]\nE       \t(No symbol) [0x00007FF6860C71F0]\nE       \t(No symbol) [0x00007FF6860DEB82]\nE       \t(No symbol) [0x00007FF6860C6DB3]\nE       \t(No symbol) [0x00007FF68609D2B1]\nE       \t(No symbol) [0x00007FF68609E494]\nE       \tGetHandleVerifier [0x00007FF6864CEF82+2849794]\nE       \tGetHandleVerifier [0x00007FF686521D24+3189156]\nE       \tGetHandleVerifier [0x00007FF68651ACAF+3160367]\nE       \tGetHandleVerifier [0x00007FF6862B6D06+653702]\nE       \t(No symbol) [0x00007FF6861AA208]\nE       \t(No symbol) [0x00007FF6861A62C4]\nE       \t(No symbol) [0x00007FF6861A63F6]\nE       \t(No symbol) [0x00007FF6861967A3]\nE       \tBaseThreadInitThunk [0x00007FF98D027614+20]\nE       \tRtlUserThreadStart [0x00007FF98E0C26A1+33]\n\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"beginandend","time":{"start":1692871897525,"stop":1692871898847,"duration":1322},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=116.0.5845.97)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6862252A2+57122]\n\t(No symbol) [0x00007FF68619EA92]\n\t(No symbol) [0x00007FF68606E25D]\n\t(No symbol) [0x00007FF6860A32B7]\n\t(No symbol) [0x00007FF6860A263B]\n\t(No symbol) [0x00007FF6860C6FDA]\n\t(No symbol) [0x00007FF68609EB76]\n\t(No symbol) [0x00007FF6860C71F0]\n\t(No symbol) [0x00007FF6860DEB82]\n\t(No symbol) [0x00007FF6860C6DB3]\n\t(No symbol) [0x00007FF68609D2B1]\n\t(No symbol) [0x00007FF68609E494]\n\tGetHandleVerifier [0x00007FF6864CEF82+2849794]\n\tGetHandleVerifier [0x00007FF686521D24+3189156]\n\tGetHandleVerifier [0x00007FF68651ACAF+3160367]\n\tGetHandleVerifier [0x00007FF6862B6D06+653702]\n\t(No symbol) [0x00007FF6861AA208]\n\t(No symbol) [0x00007FF6861A62C4]\n\t(No symbol) [0x00007FF6861A63F6]\n\t(No symbol) [0x00007FF6861967A3]\n\tBaseThreadInitThunk [0x00007FF98D027614+20]\n\tRtlUserThreadStart [0x00007FF98E0C26A1+33]","statusTrace":"self = <TestCase.test_platforms.Testplatforms object at 0x00000239EBD30B50>\ndata = ['test01', 1, 1, 1, 2, 1, ...]\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"243f84aa10e82f99d172b17fe4377220\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    @pytest.mark.parametrize('data',excle_read('./data/ele.xlsx', '推广链接查询用例'))\n    def test_promotions(self, data, beginandend):\n        for i in range(len(data)):\n            if data[i] is None:\n                data[i] = 'null'\n                print(data[i])\n        test_num, ID, vedio_id, episodes_id, user_id, set_id, pay_id, result = data\n        self.driver, self.logger = beginandend\n        p = PlatformPage(self.driver)\n>       p.query_promotions(ID, vedio_id, episodes_id, user_id, set_id, pay_id)\n\nTestCase\\test_platforms.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\platforms_page.py:31: in query_promotions\n    ???\nbase\\base_page.py:35: in send_keys\n    self.locate_element(args).send_keys(value)\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000239EBDDEB60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6861967A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FF98D027614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF98E0C26A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=116.0.5845.97)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6862252A2+57122]\nE       \t(No symbol) [0x00007FF68619EA92]\nE       \t(No symbol) [0x00007FF68606E25D]\nE       \t(No symbol) [0x00007FF6860A32B7]\nE       \t(No symbol) [0x00007FF6860A263B]\nE       \t(No symbol) [0x00007FF6860C6FDA]\nE       \t(No symbol) [0x00007FF68609EB76]\nE       \t(No symbol) [0x00007FF6860C71F0]\nE       \t(No symbol) [0x00007FF6860DEB82]\nE       \t(No symbol) [0x00007FF6860C6DB3]\nE       \t(No symbol) [0x00007FF68609D2B1]\nE       \t(No symbol) [0x00007FF68609E494]\nE       \tGetHandleVerifier [0x00007FF6864CEF82+2849794]\nE       \tGetHandleVerifier [0x00007FF686521D24+3189156]\nE       \tGetHandleVerifier [0x00007FF68651ACAF+3160367]\nE       \tGetHandleVerifier [0x00007FF6862B6D06+653702]\nE       \t(No symbol) [0x00007FF6861AA208]\nE       \t(No symbol) [0x00007FF6861A62C4]\nE       \t(No symbol) [0x00007FF6861A63F6]\nE       \t(No symbol) [0x00007FF6861967A3]\nE       \tBaseThreadInitThunk [0x00007FF98D027614+20]\nE       \tRtlUserThreadStart [0x00007FF98E0C26A1+33]\n\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","steps":[],"attachments":[{"uid":"1021292d07a13b31","name":"log","source":"1021292d07a13b31.txt","type":"text/plain","size":151}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"beginandend::0","time":{"start":1692871907944,"stop":1692871910011,"duration":2067},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"平台管理模块"},{"name":"tag","value":"@pytest.mark.usefixtures('beginandend')"},{"name":"parentSuite","value":"TestCase"},{"name":"suite","value":"test_platforms"},{"name":"subSuite","value":"Testplatforms"},{"name":"host","value":"DESKTOP-14KMC4A"},{"name":"thread","value":"32216-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.test_platforms"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"['test01', 1, 1, 1, 2, 1, 1, None]"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('beginandend')"]},"source":"840e6f207cb31516.json","parameterValues":["['test01', 1, 1, 1, 2, 1, 1, None]"]}