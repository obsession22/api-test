{"uid":"ba34594883e4f3b1","name":"test_query_package[data0]","fullName":"TestCase.test_table.Testtable#test_query_package","historyId":"7519edf62dc28ef7a77e3006f240ece4","time":{"start":1692858214726,"stop":1692858223679,"duration":8953},"status":"broken","statusMessage":"TypeError: 'NoneType' object is not iterable","statusTrace":"self = <TestCase.test_table.Testtable object at 0x0000020349243D60>\ndata = [1, 1, None, 1, 4, 1, ...]\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f904be52885b541bc77daa46b7857cdb\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    @pytest.mark.parametrize(\"data\", excle_read('./data/ele.xlsx', '套餐查询用例'))\n    def test_query_package(self, data, beginandend):\n        num, Id, price, give_text, description, corner, num, give_num, result = data\n        # if price is None:\n        #     price = 0\n        print(type(Id))\n        # self.test1(price)\n        # print(price)\n        self.driver, self.logger = beginandend\n        qp = packagePage(self.driver)\n>       qp.query_package(Id, price, give_text, description, corner, num, give_num)\n\nTestCase\\test_table.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\table_commit.py:162: in query_package\n    self.send_keys(self.price_key, price)\nbase\\base_page.py:35: in send_keys\n    self.locate_element(args).send_keys(value)\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:232: in send_keys\n    Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = (None,)\n\n    def keys_to_typing(value: Iterable[AnyKey]) -> List[str]:\n        \"\"\"Processes the values that will be typed in the element.\"\"\"\n        characters: List[str] = []\n        for val in value:\n            if isinstance(val, Keys):\n                # Todo: Does this even work?\n                characters.append(val)\n            elif isinstance(val, (int, float)):\n                characters.extend(str(val))\n            else:\n>               characters.extend(val)\nE               TypeError: 'NoneType' object is not iterable\n\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\common\\utils.py:138: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"beginandend","time":{"start":1692858213532,"stop":1692858214726,"duration":1194},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"TypeError: 'NoneType' object is not iterable","statusTrace":"self = <TestCase.test_table.Testtable object at 0x0000020349243D60>\ndata = [1, 1, None, 1, 4, 1, ...]\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f904be52885b541bc77daa46b7857cdb\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    @pytest.mark.parametrize(\"data\", excle_read('./data/ele.xlsx', '套餐查询用例'))\n    def test_query_package(self, data, beginandend):\n        num, Id, price, give_text, description, corner, num, give_num, result = data\n        # if price is None:\n        #     price = 0\n        print(type(Id))\n        # self.test1(price)\n        # print(price)\n        self.driver, self.logger = beginandend\n        qp = packagePage(self.driver)\n>       qp.query_package(Id, price, give_text, description, corner, num, give_num)\n\nTestCase\\test_table.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\table_commit.py:162: in query_package\n    self.send_keys(self.price_key, price)\nbase\\base_page.py:35: in send_keys\n    self.locate_element(args).send_keys(value)\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:232: in send_keys\n    Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = (None,)\n\n    def keys_to_typing(value: Iterable[AnyKey]) -> List[str]:\n        \"\"\"Processes the values that will be typed in the element.\"\"\"\n        characters: List[str] = []\n        for val in value:\n            if isinstance(val, Keys):\n                # Todo: Does this even work?\n                characters.append(val)\n            elif isinstance(val, (int, float)):\n                characters.extend(str(val))\n            else:\n>               characters.extend(val)\nE               TypeError: 'NoneType' object is not iterable\n\nC:\\python\\3.10\\lib\\site-packages\\selenium\\webdriver\\common\\utils.py:138: TypeError","steps":[],"attachments":[{"uid":"3771bfb3f8ffb1b1","name":"log","source":"3771bfb3f8ffb1b1.txt","type":"text/plain","size":151}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"beginandend::0","time":{"start":1692858223798,"stop":1692858225867,"duration":2069},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"测试后台"},{"name":"tag","value":"@pytest.mark.usefixtures('beginandend')"},{"name":"parentSuite","value":"TestCase"},{"name":"suite","value":"test_table"},{"name":"subSuite","value":"Testtable"},{"name":"host","value":"DESKTOP-14KMC4A"},{"name":"thread","value":"5356-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.test_table"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"[1, 1, None, 1, 4, 1, 1, 1, None]"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('beginandend')"]},"source":"ba34594883e4f3b1.json","parameterValues":["[1, 1, None, 1, 4, 1, 1, 1, None]"]}