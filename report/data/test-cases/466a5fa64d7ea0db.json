{"uid":"466a5fa64d7ea0db","name":"test_query_package[data0]","fullName":"TestCase.test_table.Testtable#test_query_package","historyId":"bd2cf443beba2b64829416f4919a7a35","time":{"start":1692849635287,"stop":1692849635287,"duration":0},"status":"broken","statusMessage":"TypeError: object of type 'NoneType' has no len()","statusTrace":"self = <TestCase.test_table.Testtable object at 0x000001B348A73D00>\ndata = [1, 1, None, None, 4, 1, ...]\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e429d13db12a72ce8a398bbe530fd796\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    @pytest.mark.parametrize(\"data\", excle_read('./data/ele.xlsx', '套餐查询用例'))\n    def test_query_package(self, data, beginandend):\n        num, Id, price, give_text, description, corner, num, give_num, result = data\n        self.driver, self.logger = beginandend\n        qp = packagePage(self.driver)\n        print(Id)\n        print(price)\n>       self.of(price)\n\nTestCase\\test_table.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.test_table.Testtable object at 0x000001B348A73D00>\nparameters = None\n\n    def of(self, parameters: dict):\n>       if len(parameters) == 0:\nE       TypeError: object of type 'NoneType' has no len()\n\nTestCase\\test_table.py:80: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"beginandend","time":{"start":1692849634045,"stop":1692849635286,"duration":1241},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"TypeError: object of type 'NoneType' has no len()","statusTrace":"self = <TestCase.test_table.Testtable object at 0x000001B348A73D00>\ndata = [1, 1, None, None, 4, 1, ...]\nbeginandend = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e429d13db12a72ce8a398bbe530fd796\")>, <Logger 测试 (DEBUG)>)\n\n    @pytest.mark.usefixtures('beginandend')\n    @pytest.mark.parametrize(\"data\", excle_read('./data/ele.xlsx', '套餐查询用例'))\n    def test_query_package(self, data, beginandend):\n        num, Id, price, give_text, description, corner, num, give_num, result = data\n        self.driver, self.logger = beginandend\n        qp = packagePage(self.driver)\n        print(Id)\n        print(price)\n>       self.of(price)\n\nTestCase\\test_table.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TestCase.test_table.Testtable object at 0x000001B348A73D00>\nparameters = None\n\n    def of(self, parameters: dict):\n>       if len(parameters) == 0:\nE       TypeError: object of type 'NoneType' has no len()\n\nTestCase\\test_table.py:80: TypeError","steps":[],"attachments":[{"uid":"9df9b4d5d4a16921","name":"log","source":"9df9b4d5d4a16921.txt","type":"text/plain","size":151}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"beginandend::0","time":{"start":1692849635400,"stop":1692849637446,"duration":2046},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"测试后台"},{"name":"tag","value":"@pytest.mark.usefixtures('beginandend')"},{"name":"parentSuite","value":"TestCase"},{"name":"suite","value":"test_table"},{"name":"subSuite","value":"Testtable"},{"name":"host","value":"DESKTOP-14KMC4A"},{"name":"thread","value":"22156-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.test_table"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"[1, 1, None, None, 4, 1, 1, 1, None]"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('beginandend')"]},"source":"466a5fa64d7ea0db.json","parameterValues":["[1, 1, None, None, 4, 1, 1, 1, None]"]}